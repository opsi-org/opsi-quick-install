# Variable definitions
variables:
  GIT_SUBMODULE_STRATEGY: recursive

  RUN_PIPLINE:
    value: "true"  # run pipline NOT by default
    description: "Run the pipline if set to true."

  PROJECT_NAME:
    value: "opsi_quick_install_project"
    description: "Project name of the project the pipline should run on."

  PLATFORM:
    value: "Linux"
    description: "For which build modes should the lazarus project be compiled?
    all: build project for all platforms (Win32, Win64, Linux, MacOS)
    Windows (Linux, MacOS):  build project for the specified platform only"

  MAINVERSION:
    value: "0"

  SUBVERSION:
    value: "0"

# Control of the Pipline
workflow:
  rules:
    - if: '$RUN_PIPLINE == "true"'
      when: always

stages:
  - build
  - getversion
  - upload
  - publish

default:
  before_script:
    - echo "Execute this command before any 'script:' commands."

#***************************************#
#  opsi-QuickInstall pipline                  #
#***************************************#

compile opsi-quickinstall linux:
  stage: build
  tags:
    - laz-linux
  rules:
    - if: ($PROJECT_NAME == "opsi_quick_install_project" && $PLATFORM == "Linux")
  before_script:
    - git submodule update --init
  script:
    - git submodule update --init --recursive
    - cd l-opsi-server-products && git pull origin master && cd ..
    
    # move common translation files to locale folder in build folder so that they are also delivered
    - cp lazarus/common/OpsiLinuxInstaller/locale/* build/opsi-quickinstall/locale
    
    - LAZ_PROJECT_FILE_GUI=gui/${PROJECT_NAME}.lpi
    - LAZ_PROJECT_FILE_NOGUI=nogui/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE_GUI"
    - echo "$LAZ_PROJECT_FILE_NOGUI"   
    - echo "Compiling $PROJECT_NAME for Linux with no GUI"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE_NOGUI --build-mode=Release
    - echo "Compiling $PROJECT_NAME for Linux with GUI"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE_GUI --build-mode=Release
    - LOS_MAINVERSION=$(cat l-opsi-server-products/l-opsi-server/OPSI/control | grep -m2 version | sed -n 2p | awk '{ print $2 }')
    - LOS_SUBVERSION=$(cat l-opsi-server-products/l-opsi-server/OPSI/control | grep -m2 version | sed -n 1p | awk '{ print $2 }')
    - '[-n "$(ls -d l-opsi-server*)"] && rm -r build/opsi-quickinstall/l-opsi-server*'
    - mkdir build/opsi-quickinstall/l-opsi-server_$LOS_MAINVERSION-$SUBVERSION
    - cp -r l-opsi-server-products/l-opsi-server/* build/opsi-quickinstall/l-opsi-server_$LOS_MAINVERSION-$SUBVERSION
   
  artifacts:
    name: "opsi-quickinstall (linux)"
    paths:
      - build/*

getversion opsi-quick-install:
  stage: getversion
  tags:
    - laz-linux
  rules:
    - if: ($PROJECT_NAME == "opsi_quick_install_project" && $PLATFORM == "Linux")
  script:
    - echo "Read Opsi-QuickInstall version from file"
    - "echo 'Hint: A new l-opsi-server version has to be written manually as Opsi-QuickInstall version to the file build/OpsiQuickInstall_Version!'"
    # (We store the Opsi-QuickInstall version in a file to be able to easily adjust it
    # for publishing (binaryindex, download.uib) in case that something in OQI changed and
    # you like to increase the version but there is no new l-opsi-server)
    - MAINVERSION=$(cat build/OpsiQuickInstall_Version | grep Mainversion | awk '{ print $2 }')
    - SUBVERSION=$(cat build/OpsiQuickInstall_Version | grep Subversion | awk '{ print $2 }')  
    - echo $MAINVERSION $SUBVERSION

.jenkinsintegrationtest: &jenkinsintegrationtest |
  response=$(curl --insecure -v -X POST https://jenkinsttt.uib.local/job/4.2/debian11-qi.experimental42 2>&1)
  url=$(echo "$response" | grep "Location" | grep -o 'https://.*/')   # this is the global queue id
  echo "waiting for start of queue item $url"
  sleep 20
  response=$(curl --insecure "$url/api/json" 2> /dev/null)
  echo "$response"
  while echo "$response" | grep -q '"blocked":true'; do echo "waiting for job start"; sleep 20; response=$(curl --insecure "$url/api/json" 2> /dev/null); done
  url=$(echo "$response" | grep -o 'https://[^"]*[0-9]\+/')           # this is the specific build id for the pipeline
  echo "waiting for completion of job $url"
  response=$(curl --insecure "$url/api/json" 2> /dev/null)
  while echo "$response" | grep -q '"result":null'; do echo "still waiting"; sleep 20; response=$(curl --insecure "$url/api/json" 2> /dev/null); done
  echo "$response"
  if echo "$response" | grep -q '"result":"SUCCESS"'; then echo 'result:SUCCESS'; exit 0; fi
  echo 'NOT successful'
  response=$(curl --insecure "$url/consoleText/api/json" 2> /dev/null)
  echo "$response" | grep "Failed in branch"
  exit 1

upload opsi-quick-install:
  stage: upload
  tags:
    - laz-linux
  rules:
    - if: ($PROJECT_NAME == "opsi_quick_install_project" && $PLATFORM == "Linux")
  script:
    - cd build/
    - rm -rf opsi-quickinstall/l-opsi-server
    - '[ "$CI_COMMIT_TAG" == "" ] && ./opsi-dev-tool --log-level info --uib-binaryindex-password=ahx9taePhu --binary-push opsi-quickinstall opsi-quick-install linux x64 $MAINVERSION-$SUBVERSION "$CI_JOB_ID"'
    - '[ "$CI_COMMIT_BRANCH" == "main" && "$CI_COMMIT_TAG" != "" ] && ./opsi-dev-tool --uib-binaryindex-password=ahx9taePhu --binary-cleanup opsi-quick-install linux x64'
    - '[ "$CI_COMMIT_BRANCH" == "main" && "$CI_COMMIT_TAG" != "" ] && ./opsi-dev-tool --log-level info --uib-binaryindex-password=ahx9taePhu --binary-push opsi-quickinstall opsi-quick-install linux x64 $MAINVERSION-$SUBVERSION'
    - *jenkinsintegrationtest

publish opsi-quick-install:
  stage: publish
  tags:
    - laz-linux
  rules:
    - if: ($PROJECT_NAME == "opsi_quick_install_project" && $PLATFORM == "Linux")
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG != "")
  script:
    - 'zip -r opsi-quickinstall_$MAINVERSION-$SUBVERSION.zip opsi-quickinstall'
    - 'ssh opsi@download.uib.de "rm -rf ~/htdocs/opsi4.2/experimental/quickinstall/opsi-quickinstall_*"'
    - 'scp opsi-quickinstall_$MAINVERSION-$SUBVERSION.zip opsi@download.uib.de:~/htdocs/opsi4.2/experimental/quickinstall/'
    - 'ssh opsi@download.uib.de "cd ~/htdocs/opsi4.2/experimental/quickinstall/ && ln -sf opsi-quickinstall_$MAINVERSION-$SUBVERSION.zip opsi-quickinstall.zip"'
