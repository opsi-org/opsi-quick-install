image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-default

# Variable definitions
variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - upload
  - publish

#***************************************#
#  opsi-QuickInstall pipeline                  #
#***************************************#

compile opsi-quickinstall linux:
  stage: build
  tags:
    - laz-linux
  before_script:
    - git submodule update --init
    - git submodule update --init --recursive
    - cd l-opsi-server-products && git pull origin main && cd ..
  script:
    # move common translation files to locale folder in build folder so that they are also delivered
    - cp lazarus/common/OpsiLinuxInstaller/locale/* build/opsi-quickinstall/locale
    - PROJECT_NAME="opsi_quick_install_project"
    - LAZ_PROJECT_FILE_GUI=gui/${PROJECT_NAME}.lpi
    - LAZ_PROJECT_FILE_NOGUI=nogui/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE_GUI"
    - echo "$LAZ_PROJECT_FILE_NOGUI"
    - echo "Compiling $PROJECT_NAME for Linux with no GUI"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE_NOGUI --build-mode=Release
    - echo "Compiling $PROJECT_NAME for Linux with GUI"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE_GUI --build-mode=Release
    - LOPSISERVER_MAINVERSION=$(cat l-opsi-server-products/l-opsi-server/OPSI/control | grep -m2 version | sed -n 2p | awk '{ print $2 }')
    - LOPSISERVER_SUBVERSION=$(cat l-opsi-server-products/l-opsi-server/OPSI/control | grep -m2 version | sed -n 1p | awk '{ print $2 }')
    - '[-n "$(ls -d l-opsi-server*)"] && rm -r build/opsi-quickinstall/l-opsi-server*'
    - mkdir build/opsi-quickinstall/l-opsi-server_$LOPSISERVER_MAINVERSION-$LOPSISERVER_SUBVERSION
    - cp -r l-opsi-server-products/l-opsi-server/* build/opsi-quickinstall/l-opsi-server_$LOPSISERVER_MAINVERSION-$LOPSISERVER_SUBVERSION
  artifacts:
    name: "opsi-quickinstall (linux)"
    paths:
      - build/*

# This is a yaml anchor used in the stages below (The pipe in the anchor head is to preserve line breaks):

# We store the Opsi-QuickInstall version in a file to be able to easily adjust it
# for publishing (binaryindex, download.uib) in case that something in OQI changed and
# you like to increase the version but there is no new l-opsi-server.
.readversion: &readversion |
  echo "Read Opsi-QuickInstall version from file"
  echo 'Hint: A new l-opsi-server version has to be written manually as Opsi-QuickInstall version to the file build/opsi-quickinstall/version.txt!'
  MAINVERSION=$(cat build/opsi-quickinstall/version.txt | grep Mainversion | awk '{ print $2 }')
  SUBVERSION=$(cat build/opsi-quickinstall/version.txt | grep Subversion | awk '{ print $2 }')
  echo $MAINVERSION-$SUBVERSION
  cd build/
  rm -rf opsi-quickinstall/l-opsi-server

upload opsi-quick-install:
  stage: upload
  timeout: 2h
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "merge_request_event"'
  before_script:
    - *readversion
  script:
    - opsi-dev-cli -l 6 binary push opsi-quickinstall --product=opsi-quick-install --version="$MAINVERSION-$SUBVERSION" --prerelease="$CI_JOB_ID"
    - opsi-dev-cli jenkins test --pipeline=4.3/job/few-qi.experimental43 --build-with-parameters=False
    - if (($? == 0)); then exit 0; else exit 1; fi
    - opsi-dev-cli jenkins test --pipeline=4.2/job/few-qi.experimental42 --build-with-parameters=False
    - if (($? == 0)); then exit 0; else exit 1; fi

publish opsi-quick-install:
  stage: publish
  timeout: 2h
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - *readversion
  script:
    - 'if [[ $(read -r FIRSTLINE < opsi-quickinstall/changelog.txt) != *"${MAINVERSION}-${SUBVERSION}"* ]]; then echo "Changelog entry missing!"; exit 1; fi'
    - opsi-dev-cli binary cleanup opsi-quick-install
    - opsi-dev-cli -l 6 binary push opsi-quickinstall --product=opsi-quick-install --version="$MAINVERSION-$SUBVERSION"  # for testing
    - mv opsi-quickinstall opsi-quickinstall_$MAINVERSION-$SUBVERSION
    - zip -r opsi-quickinstall.zip opsi-quickinstall_$MAINVERSION-$SUBVERSION
    - mv opsi-quickinstall_$MAINVERSION-$SUBVERSION opsi-quickinstall
    - opsi-dev-cli -l 6 binary push opsi-quickinstall.zip --product=opsi-quickinstall.zip --version="$MAINVERSION-$SUBVERSION"  # for production
    - opsi-dev-cli -l 6 release-service register-package-version opsi-quickinstall.zip TOOL --version="$MAINVERSION-$SUBVERSION" --files=opsi-quickinstall.zip  # TODO: --changelog-file
    - opsi-dev-cli -l 6 release-service push-repository-state opsi-quickinstall.zip TOOL TOOL-4.3-experimental --version="$MAINVERSION-$SUBVERSION" --publish
    - opsi-dev-cli jenkins test --pipeline=4.3/job/all-qi.experimental43 --build-with-parameters=False
    - if (($? == 0)); then exit 0; else exit 1; fi
    - opsi-dev-cli jenkins test --pipeline=4.2/job/all-qi.experimental42 --build-with-parameters=False
    - if (($? == 0)); then exit 0; else exit 1; fi
